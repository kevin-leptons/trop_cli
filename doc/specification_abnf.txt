; This grammar build for terminal sets in range 0x0 to 0x10FFFF. It is
; corresponding with code points in Unicode standard. Howerver, terminals
; 0x0-1F is not not uses because that range includes control characters.
;
; ANBF is not enough powerful to specific logic rules. That is reasons why
; below rules MUST apply after grammar parsing step:
;
; * option-id is unique in a command. That mean an option ID is represents
;   at most a time in a command.
; * number range and precision depends on parser implementations. That mean
;   rules does not specific range of number or precision.
; * a number without signed is positive number.

; general structure
command = simple-command / complex-command
simple-command = name *(white-space argument) *(white-space option)
complex-command = name white-space path *(white-space argument) *(white-space option)

; command's name
name = 1*lowercase *(hyphen 1*(lowercase / digit))

; command's path
path = 1*lowercase *(dot 1*(lowercase / digit))

; command's argument
argument = data 

; command's option
option = boolean-option / number-option / string-option / array-option
boolean-option = option-id
number-option = option-id white-space number
string-option = option-id white-space string
array-option = option-id white-space array
option-id = hyphen 1*lowercase

; data type
data = number / string / array

; data type - number
number = integer / float
integer = [plus / minus] 1*digit
float = [plus / minus] 1*digit [dot 1*digit]

; data type - string
string = string-with-space / string-without-space
string-with-space = single-quote 1*char-with-space single-quote
string-without-space = 1*char-without-space

; data type - array
array = array-number / array-string
array-number = number *(white-space number)
array-string = string *(white-space string)

; etc
space = " "
white-space = 1*space
lowercase = %x41-5A / %x61-7A
digit = %x30-39
dot = "."
hyphen = "-"
plus = "+"
minus = "-"
single-quote = "'"
char-with-space = %x20-10FFFF
char-without-space = %x21-10FFFF
